Perfekt! Nachdem ich die vorhandene Implementierung analysiert habe, kann ich Ihnen einen detaillierten Plan für die FinTS-Integration ohne aqbanking-cli erstellen.

## Analyse der vorhandenen Lösung

Ihre aktuelle n8n-Node nutzt bereits das `spawn` von `child_process`, um `aqbanking-cli` und `aqhbci-tool4` direkt aufzurufen. Dies ist bereits ein guter Ansatz, erfordert aber die Installation von AqBanking auf dem System.

## Strategischer Plan: Von aqbanking-cli zu nativen Alternativen

### Phase 1: Native JavaScript FinTS-Implementierung (Empfohlen)

__1.1 Bibliotheks-Research und Auswahl__

```typescript
// Kandidaten für native FinTS-Implementierung:
// 1. fints (npm: fints) - Vollständige FinTS 3.0 Implementierung
// 2. node-fints - Alternative Node.js Implementierung  
// 3. open_fints_js_client - Pure JS Client
```

__1.2 Refactoring der vorhandenen Node__

- Ersetzen der `executeAqBankingCommand` Funktion durch native FinTS-Client-Aufrufe
- Beibehaltung der bestehenden UI-Struktur und Parameter
- Implementierung der gleichen Operationen (getBalance, getTransactions, etc.)

__1.3 Neue Implementierung der Kernfunktionen__

```typescript
// Beispiel-Implementierung mit nativer FinTS-Bibliothek
import { FinTSClient } from 'fints';

async function getBalanceNative(credentials: any, accountNumber: string): Promise<any> {
    const client = new FinTSClient({
        url: credentials.serverUrl,
        blz: credentials.bankCode,
        username: credentials.userId,
        pin: credentials.pin,
        productId: 'n8n-aqbanking-node'
    });

    await client.init();
    const accounts = await client.accounts();
    const account = accounts.find(acc => acc.accountNumber === accountNumber);
    
    if (!account) {
        throw new Error(`Account ${accountNumber} not found`);
    }

    const balance = await client.balance(account);
    await client.end();
    
    return {
        balance: balance.amount,
        currency: balance.currency,
        accountNumber: account.accountNumber,
        timestamp: new Date().toISOString()
    };
}
```

### Phase 2: Python-Subprocess Integration als Fallback

__2.1 Python-Wrapper mit python-fints__

```python
# python_fints_wrapper.py
import sys
import json
from fints import FinTS3PinTanClient

def get_balance(blz, login, pin, endpoint, account_number):
    client = FinTS3PinTanClient(blz, login, pin, endpoint)
    
    accounts = client.get_sepa_accounts()
    account = next((acc for acc in accounts if acc.iban == account_number), None)
    
    if not account:
        return {"error": f"Account {account_number} not found"}
    
    balance = client.get_balance(account)
    return {
        "balance": float(balance.amount.amount),
        "currency": balance.amount.currency,
        "account_number": account_number,
        "timestamp": balance.date.isoformat()
    }

if __name__ == "__main__":
    params = json.loads(sys.argv[1])
    result = get_balance(**params)
    print(json.dumps(result))
```

__2.2 Integration in die n8n-Node__

```typescript
async function executeViaUniversalAPI(executeFunctions: IExecuteFunctions, apiType: 'python' | 'docker', operation: string, params: any): Promise<any> {
    switch (apiType) {
        case 'python':
            return executePythonFinTS(executeFunctions, operation, params);
        case 'docker':
            return executeDockerFinTS(executeFunctions, operation, params);
        default:
            throw new Error(`Unsupported API type: ${apiType}`);
    }
}
```

### Phase 3: Docker-Container Integration

__3.1 Container-Management für AqBanking__

```typescript
async function executeDockerFinTS(executeFunctions: IExecuteFunctions, operation: string, params: any): Promise<any> {
    const dockerImage = 'ghcr.io/larsux/aqbanking-docker';
    const configVolume = `${os.homedir()}/.aqbanking:/root/.aqbanking`;
    
    const dockerArgs = [
        'run', '--rm',
        '-v', configVolume,
        dockerImage,
        'aqbanking-cli', '--noninteractive',
        ...buildOperationArgs(operation, params)
    ];

    return executeCommand(executeFunctions, 'docker', dockerArgs);
}
```

## Empfohlene Implementierungsstrategie

### Schritt 1: Hybrid-Ansatz implementieren

```typescript
// Neue credential-Option für API-Typ
{
    displayName: 'FinTS Implementation',
    name: 'fintsImplementation',
    type: 'options',
    options: [
        { name: 'Native JavaScript (Recommended)', value: 'native' },
        { name: 'Python fints', value: 'python' },
        { name: 'Docker AqBanking', value: 'docker' },
        { name: 'System AqBanking (Legacy)', value: 'system' }
    ],
    default: 'native'
}
```

### Schritt 2: Schrittweise Migration

1. __Backward Compatibility__: Bestehende aqbanking-cli Funktionalität beibehalten
2. __Native Integration__: JavaScript FinTS-Client als primäre Option
3. __Fallback-Mechanismen__: Python und Docker als Alternativen
4. __Graduelle Abschaltung__: System-AqBanking als Legacy-Option

### Schritt 3: Erweiterte Features

```typescript
// TAN-Handling für native Implementation
async function handleTanProcess(client: FinTSClient, tanChallenge: any): Promise<string> {
    // Interactive TAN handling für pushTAN, photoTAN, etc.
    // Integration mit n8n's workflow pause/resume Mechanismus
    return new Promise((resolve) => {
        // TAN-Dialog implementation
    });
}
```

## Vorteile der nativen Lösung

1. __Keine externe Abhängigkeit__: Läuft in jeder n8n-Umgebung
2. __Cloud-kompatibel__: Funktioniert in n8n-Cloud ohne Installation
3. __Moderne TAN-Unterstützung__: Bessere Integration von pushTAN, photoTAN
4. __Performance__: Direkter API-Zugriff ohne CLI-Wrapper
5. __Wartbarkeit__: Reine TypeScript-Implementierung

## Nächste Schritte

Soll ich mit der Implementation der nativen JavaScript-Lösung beginnen? Mein Vorschlag wäre:

1. Zunächst eine `fints`-Bibliothek evaluieren und testen
2. Die `getBalance` Funktion als Proof-of-Concept umsetzen
3. Schrittweise alle Operationen migrieren
4. Backward-Compatibility für bestehende Installationen sicherstellen

Welche Phase möchten Sie priorisieren, oder sollen wir direkt mit der nativen JavaScript-Implementierung starten?
